/*************************************************************/

// Classes

//-----------------------------------------------------------//

/**
 * @class Аудиоплеер для браузера.
 * @name Audio
 *
 * @extends lib.Events
 *
 * @fires Audio.EVENT_PLAY
 * @fires Audio.EVENT_ENDED
 * @fires Audio.EVENT_VOLUME
 * @fires Audio.EVENT_CRASHED
 * @fires Audio.EVENT_STATE
 * @fires Audio.EVENT_SWAP
 * @fires Audio.EVENT_STOP
 * @fires Audio.EVENT_PAUSE
 * @fires Audio.EVENT_PROGRESS
 * @fires Audio.EVENT_LOADING
 * @fires Audio.EVENT_LOADED
 * @fires Audio.EVENT_ERROR
 * @fires Audio.PRELOADER_EVENT+EVENT_STOP
 * @fires Audio.PRELOADER_EVENT+EVENT_PROGRESS
 * @fires Audio.PRELOADER_EVENT+EVENT_LOADING
 * @fires Audio.PRELOADER_EVENT+EVENT_LOADED
 * @fires Audio.PRELOADER_EVENT+EVENT_ERROR
 *
 * @constructor
 * 
 * @param { String } [preferredType] Предпочитаемый тип плеера. Может принимать значения: &quot;html5&quot;, &quot;flash&quot; или любое ложное значение (false, null, undefined, 0, &quot;&quot;). Если выбранный тип плеера окажется недоступен, будет запущен оставшийся тип. Если указано ложное значение либо параметр не передан, то API автоматически выберет поддерживаемый тип плеера. Если браузер поддерживает обе технологии, то по умолчанию YandexAudio создает аудиоплеер на основе HTML5.
 * @param { HTMLElement } [overlay] HTML-контейнер для отображения Flash-апплета.
 * 
 */

/*************************************************************/

// Members

/**
 * Список доступных плееров
 * @field
 * @name info
 * @type Object 
 * 
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Контекст для Web Audio API.
 * @field
 * @name audioContext
 * @type AudioContext 
 * 
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Событие предзагрузчика. Используется в качестве префикса.
 * @field
 * @name PRELOADER_EVENT
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Плеер находится в состоянии инициализации.
 * @field
 * @name STATE_INIT
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Не удалось инициализировать плеер.
 * @field
 * @name STATE_CRASHED
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Плеер готов и ожидает.
 * @field
 * @name STATE_IDLE
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Плеер проигрывает трек.
 * @field
 * @name STATE_PLAYING
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/**
 * Плеер поставлен на паузу.
 * @field
 * @name STATE_PAUSED
 * @type String 
 * @const
 * @memberof Audio
 * 
 * @static 
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * 
 * @name getDuration
 * 
 * @memberof Audio
 *
 * @param { Boolean | int } preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.
 * @returns { Number } Получить длительность текущего аудио-файла (в секундах).
 */

/**
 * @function
 * 
 * @name initPromise
 * 
 * @memberof Audio
 *
 * @returns { lib.Promise } Получить обещание, разрешающееся после завершения инициализации.
 */

/**
 * @function
 * 
 * @name getType
 * 
 * @memberof Audio
 *
 * @returns { String | null } Получить текущий тип реализации плеера.Получить текущий тип реализации плеера.
 */

/**
 * @function
 * 
 * @name getSrc
 * 
 * @memberof Audio
 *
 * @param { int } [offset] Брать аудио-файл из активного плеера или из прелоадера. 0 - активный плеер, 1 - прелоадер.
 * @returns { String | null } Получить ссылку на текущий трек.Получить ссылку на текущий трек.
 */

/**
 * @function
 * 
 * @name play
 * 
 * @memberof Audio
 *
 * @param { String } src Ссылка на трек.
 * @param { Number } [duration] Длительность аудио-файла. Актуально для Flash-реализации, в ней пока аудио-файл грузится длительность определяется с погрешностью.
 * @returns { AbortablePromise } Запуск воспроизведения.
 */

/**
 * @function
 * Перезапуск воспроизведения.
 * @name restart
 * 
 * @memberof Audio
 *
 * @returns { AbortablePromise } обещание, которое разрешится, когда трек будет перезапущен.
 */

/**
 * @function
 * Остановка воспроизведения.
 * @name stop
 * 
 * @memberof Audio
 *
 * @param { int } [offset] Активный плеер или прелоадер. 0 - активный плеер. 1 - прелоадер.
 * @returns { AbortablePromise } обещание, которое разрешится, когда воспроизведение будет остановлено.
 */

/**
 * @function
 * Поставить плеер на паузу.
 * @name pause
 * 
 * @memberof Audio
 *
 * @returns { AbortablePromise } обещание, которое  разрешится, когда плеер будет поставлен на паузу.
 */

/**
 * @function
 * Снятие плеера с паузы.
 * @name resume
 * 
 * @memberof Audio
 *
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется воспроизведение.
 */

/**
 * @function
 * Запуск воспроизведения предзагруженного аудиофайла.
 * @name playPreloaded
 * 
 * @memberof Audio
 *
 * @param { String } [src] Ссылка на аудиофайл (для проверки, что в прелоадере нужный трек).
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется воспроизведение предзагруженного аудиофайла.
 */

/**
 * @function
 * Предзагрузка аудиофайла.
 * @name preload
 * 
 * @memberof Audio
 *
 * @param { String } src Ссылка на трек.
 * @param { Number } [duration] Длительность аудиофайла. Актуально для Flash-реализации, в ней пока аудиофайл грузится длительность определяется с погрешностью.
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется предзагрузка аудиофайла.
 */

/**
 * @function
 * Проверка, что аудиофайл предзагружен.
 * @name isPreloaded
 * 
 * @memberof Audio
 *
 * @param { String } src Ссылка на трек.
 * @returns { Boolean } true, если аудиофайл предзагружен, false - иначе.
 */

/**
 * @function
 * Проверка, что аудиофайл предзагружается.
 * @name isPreloading
 * 
 * @memberof Audio
 *
 * @param { String } src Ссылка на трек.
 * @returns { Boolean } true, если аудиофайл начал предзагружаться, false - иначе.
 */

/**
 * @function
 * 
 * @name getPosition
 * 
 * @memberof Audio
 *
 * @returns { Number } Получение позиции воспроизведения (в секундах).
 */

/**
 * @function
 * Установка позиции воспроизведения (в секундах).
 * @name setPosition
 * 
 * @memberof Audio
 *
 * @param { Number } position Новая позиция воспроизведения
 * @returns { Number } итоговая позиция воспроизведения.
 */

/**
 * @function
 * 
 * @name getState
 * 
 * @memberof Audio
 *
 * @returns { String } Получить статус плеера.
 */

/**
 * @function
 * 
 * @name getLoaded
 * 
 * @memberof Audio
 *
 * @param { Boolean | int } preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.
 * @returns { Number } Получить длительность загруженной части (в секундах).
 */

/**
 * @function
 * 
 * @name getPlayed
 * 
 * @memberof Audio
 *
 * @returns { Number } Получить длительность воспроизведения (в секундах).
 */

/**
 * @function
 * 
 * @name getVolume
 * 
 * @memberof Audio
 *
 * @returns { Number } Получить текущее значение громкости плеера.
 */

/**
 * @function
 * Установка громкости плеера.
 * @name setVolume
 * 
 * @memberof Audio
 *
 * @param { Number } volume Новое значение громкости.
 * @returns { Number } итоговое значение громкости.
 */

/**
 * @function
 * Проверка, что громкость управляется устройством, а не программно.
 * @name isDeviceVolume
 * 
 * @memberof Audio
 *
 * @returns { Boolean } true, если громкость управляется устройством, false - иначе.
 */

/**
 * @function
 * Включить режим CORS для получения аудио-треков
 * @name toggleCrossDomain
 * 
 * @memberof Audio
 *
 * @param { Boolean } state Запрашиваемый статус.
 * @returns { boolean } статус успеха.
 */

/**
 * @function
 * Переключение режима использования Web Audio API. Доступен только при html5-реализации плеера.
Внимание!!! После включения режима Web Audio API он не отключается полностью, т.к. для этого требуется
реинициализация плеера, которой требуется клик пользователя. При отключении из графа обработки исключаются
все ноды кроме нод-источников и ноды вывода, управление громкостью переключается на элементы audio, без
использования GainNode.
 * @name toggleWebAudioAPI
 * 
 * @memberof Audio
 *
 * @param { Boolean } state Запрашиваемый статус.
 * @returns { Boolean } итоговый статус
 */

/**
 * @function
 * Подключение аудио препроцессора. Вход препроцессора подключается к аудиоэлементу, у которого выставлена
100% громкость. Выход препроцессора подключается к GainNode, которая регулирует итоговую громкость.
 * @name setAudioPreprocessor
 * 
 * @memberof Audio
 *
 * @param { AudioPreprocessor } preprocessor Препроцессор.
 * @returns { boolean } статус успеха.
 */

/**
 * @function
 * 
 * @name getPlayId
 * 
 * @memberof Audio
 *
 * @returns { String } Получить уникальный идентификатор воспроизведения. Создаётся каждый раз при запуске нового трека или перезапуске текущего.
 */

/*************************************************************/

// lib.Events

/**
 * Событие обновления позиции воспроизведения или загруженной части.
 * 
 * @event
 * @name Audio.EVENT_PROGRESS
 * @param { AudioTimes } times Информация о временных данных аудиофайла.
 */

/**
 * Событие начала воспроизведения.
 * 
 * @event
 * @name Audio.EVENT_PLAY
 */

/**
 * Событие изменения громкости.
 * 
 * @event
 * @name Audio.EVENT_VOLUME
 * @param { Number } volume Новое значение громкости.
 */

/**
 * Событие возникновения ошибки при инициализации плеера.
 * 
 * @event
 * @name Audio.EVENT_CRASHED
 */

/**
 * Событие смены статуса плеера.
 * 
 * @event
 * @name Audio.EVENT_STATE
 * @param { String } state Новый статус плеера.
 */

/**
 * Событие переключения активного плеера и прелоадера.
 * 
 * @event
 * @name Audio.EVENT_SWAP
 */

/**
 * Событие остановки воспроизведения.
 * 
 * @event
 * @name Audio.EVENT_STOP
 */

/**
 * Событие паузы воспроизведения.
 * 
 * @event
 * @name Audio.EVENT_PAUSE
 */

/**
 * Событие завершения воспроизведения.
 * 
 * @event
 * @name Audio.EVENT_ENDED
 */

/**
 * Событие начала загрузки аудиофайла.
 * 
 * @event
 * @name Audio.EVENT_LOADING
 */

/**
 * Событие завершения загрузки аудиофайла.
 * 
 * @event
 * @name Audio.EVENT_LOADED
 */

/**
 * Событие ошибки воспроизведения.
 * 
 * @event
 * @name Audio.EVENT_ERROR
 */

/**
 * Событие остановки воспроизведения.
 * 
 * @event
 * @name Audio.PRELOADER_EVENT+EVENT_STOP
 */

/**
 * Событие обновления позиции загруженной части.
 * 
 * @event
 * @name Audio.PRELOADER_EVENT+EVENT_PROGRESS
 * @param { AudioTimes } times Информация о временных данных аудиофайла.
 */

/**
 * Событие начала загрузки аудиофайла.
 * 
 * @event
 * @name Audio.PRELOADER_EVENT+EVENT_LOADING
 */

/**
 * Событие завершения загрузки аудиофайла.
 * 
 * @event
 * @name Audio.PRELOADER_EVENT+EVENT_LOADED
 */

/**
 * Событие ошибки воспроизведения.
 * 
 * @event
 * @name Audio.PRELOADER_EVENT+EVENT_ERROR
 */
//-----------------------------------------------------------//

/**
 * @class Класс ошибки аудиопллеера.
 * @name Audio.AudioError
 *
 * @extends <xref scope="external" href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Error">Error</xref> 
 *
 * @constructor
 * 
 * @param { String } message Текст ошибки.
 * 
 */

/*************************************************************/

// Members

/**
 * Не найдена реализация плеера или возникла ошибка при инициализации всех доступных реализаций.
 * @field
 * @name NO_IMPLEMENTATION
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Аудиофайл не был предзагружен или во время загрузки произошла ошибка.
 * @field
 * @name NOT_PRELOADED
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Действие недоступно из текущего состояния.
 * @field
 * @name BAD_STATE
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Flash-плеер был заблокирован.
 * @field
 * @name FLASH_BLOCKER
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Возникла ошибка при инициализации Flash-плеера по неизвестным причинам.
 * @field
 * @name FLASH_UNKNOWN_CRASH
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Возникла ошибка при инициализации Flash-плеера из-за таймаута.
 * @field
 * @name FLASH_INIT_TIMEOUT
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Внутренняя ошибка Flash-плеера.
 * @field
 * @name FLASH_INTERNAL_ERROR
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Попытка вызвать недоступный экземляр Flash-плеера.
 * @field
 * @name FLASH_EMMITER_NOT_FOUND
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

/**
 * Flash-плеер перестал отвечать на запросы.
 * @field
 * @name FLASH_NOT_RESPONDING
 * @type String 
 * @const
 * @memberof Audio.AudioError
 * 
 * @static 
 *
 */

//-----------------------------------------------------------//

/**
 * @class Класс ошибки воспроизведения.
 * @name Audio.PlaybackError
 *
 * @extends <xref scope="external" href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Error">Error</xref> 
 *
 * @constructor
 * 
 * @param { String } message Текст ошибки.
 * @param { String } src Ссылка на трек.
 * 
 */

/*************************************************************/

// Members

/**
 * Отмена соединенния.
 * @field
 * @name CONNECTION_ABORTED
 * @type String 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

/**
 * Сетевая ошибка.
 * @field
 * @name NETWORK_ERROR
 * @type String 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

/**
 * Ошибка декодирования аудио.
 * @field
 * @name DECODE_ERROR
 * @type String 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

/**
 * Недоступный источник.
 * @field
 * @name BAD_DATA
 * @type String 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

/**
 * Не запускается воспроизведение.
 * @field
 * @name DONT_START
 * @type String 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

/**
 * Таблица соответствия кодов ошибок HTML5 плеера.
 * @field
 * @name html5
 * @type Object 
 * @const
 * @memberof Audio.PlaybackError
 * 
 * @static 
 *
 */

//-----------------------------------------------------------//

/**
 * @class Эквалайзер.
 * @name Audio.fx.Equalizer
 *
 * @extends lib.Events
 *
 * @fires Audio.fx.Equalizer.EVENT_CHANGE
 *
 * @constructor
 * 
 * @param { AudioContext } audioContext Контекст Web Audio API.
 * @param { Number[] } bands Список частот для полос эквалайзера.
 * 
 */

/*************************************************************/

// Members

/**
 * Набор частот эквалайзера, применяющийся по умолчанию.
 * @field
 * @name DEFAULT_BANDS
 * @type Number[] 
 * @const
 * @memberof Audio.fx.Equalizer
 * 
 * @static 
 *
 */

/**
 * Набор распространенных пресетов эквалайзера для набора частот по умолчанию.
 * @field
 * @name DEFAULT_PRESETS
 * @type Object.&lt;String, EqualizerPreset&gt; 
 * @const
 * @memberof Audio.fx.Equalizer
 * 
 * @static 
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * Загрузить настройки.
 * @name loadPreset
 * 
 * @memberof Audio.fx.Equalizer
 *
 * @param { EqualizerPreset } preset Настройки.
 * 
 */

/**
 * @function
 * 
 * @name savePreset
 * 
 * @memberof Audio.fx.Equalizer
 *
 * @returns { EqualizerPreset } Сохранить текущие настройки.
 */

/**
 * @function
 * Вычисляет оптимальное значение предусиления. Функция является экспериментальной.
 * @name guessPreamp
 * 
 * @memberof Audio.fx.Equalizer
 *
 * @returns { number } значение предусиления.
 */

/*************************************************************/

// lib.Events

/**
 * Событие изменения полосы пропускания
 * 
 * @event
 * @name Audio.fx.Equalizer.EVENT_CHANGE
 * @param { Number } freq Частота полосы пропускания.
 * @param { Number } value Значение усиления.
 */
//-----------------------------------------------------------//

/**
 * @class Класс для управления обещанием
 * @name lib.Deferred
 *
 * @constructor
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * Разрешить обещание
 * @name resolve
 * 
 * @memberof lib.Deferred
 *
 * @param  data передать данные в обещание
 * 
 */

/**
 * @function
 * Отклонить обещание
 * @name reject
 * 
 * @memberof lib.Deferred
 *
 * @param  error передать ошибку
 * 
 */

/**
 * @function
 * 
 * @name promise
 * 
 * @memberof lib.Deferred
 *
 * @returns { lib.Promise } Получить обещание
 */

//-----------------------------------------------------------//

/**
 * @class Диспетчер событий.
 * @name lib.Events
 *
 * @constructor
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * Расширить произвольный класс свойствами диспетчера событий.
 * @name mixin
 * 
 * @memberof lib.Events
 * 
 * @static
 * @param { function } classConstructor Конструктор класса.
 * @returns { function } тот же конструктор класса, расширенный свойствами диспетчера событий.
 */

/**
 * @function
 * Расширить произвольный объект свойствами диспетчера событий.
 * @name eventize
 * 
 * @memberof lib.Events
 * 
 * @static
 * @param { Object } object Объект.
 * @returns { Object } тот же объект, расширенный свойствами диспетчера событий.
 */

/**
 * @function
 * Подписаться на событие (цепочный метод).
 * @name on
 * 
 * @memberof lib.Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { lib.Events } ссылку на контекст.
 */

/**
 * @function
 * Отписаться от события (цепочный метод).
 * @name off
 * 
 * @memberof lib.Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { lib.Events } ссылку на контекст.
 */

/**
 * @function
 * Подписаться на событие и отписаться сразу после его первого возникновения (цепочный метод).
 * @name once
 * 
 * @memberof lib.Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { lib.Events } ссылку на контекст.
 */

/**
 * @function
 * Отписаться от всех слушателей событий (цепочный метод).
 * @name clearListeners
 * 
 * @memberof lib.Events
 *
 * @returns { lib.Events } ссылку на контекст.
 */

/**
 * @function
 * Остановить запуск событий (цепочный метод).
 * @name muteEvents
 * 
 * @memberof lib.Events
 *
 * @returns { lib.Events } ссылку на контекст.
 */

/**
 * @function
 * Возобновить запуск событий (цепочный метод).
 * @name unmuteEvents
 * 
 * @memberof lib.Events
 *
 * @returns { lib.Events } ссылку на контекст.
 */

//-----------------------------------------------------------//

/**
 * @class Обещание по спецификации <xref href='https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Promise' scope='external'>ES 2015 promises</xref>. В устаревших браузерах и IE используется замена из библиотеки <xref href='http://github.com/dfilatov/vow.git' scope='external'>vow</xref>
 * @name lib.Promise
 *
 * @constructor
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * Назначить обработчики разрешения и отклонения обещания.
 * @name then
 * 
 * @memberof lib.Promise
 *
 * @param { function } callback Обработчик успеха.
 * @param { null | function } [errback] Обработчик ошибки.
 * @returns { lib.Promise } новое обещание из результатов обработчика.
 */

/**
 * @function
 * Назначить обработчик отклонения обещания.
 * @name catch
 * 
 * @memberof lib.Promise
 *
 * @param { function } errback Обработчик ошибки.
 * @returns { lib.Promise } новое обещание из результатов обработчика.
 */

//-----------------------------------------------------------//

/**
 * @class Класс ошибок загрузчика.
Расширяет Error.
 * @name Audio.LoaderError
 *
 * @constructor
 * 
 * @param { String } message Текст ошибки.
 * 
 */

/*************************************************************/

// Members

/**
 * Таймаут загрузки.
 * @field
 * @name TIMEOUT
 * @type String 
 * @const
 * @memberof Audio.LoaderError
 * 
 * @static 
 *
 */

/**
 * Ошибка запроса на загрузку.
 * @field
 * @name FAILED
 * @type String 
 * @const
 * @memberof Audio.LoaderError
 * 
 * @static 
 *
 */

//-----------------------------------------------------------//

/**
 * @class Настраиваемый логгер для аудиоплеера.
 * @name Logger
 *
 * @constructor
 * 
 * @param { String } channel Имя канала, за который будет отвечать экземляр логгера.
 * 
 */

/*************************************************************/

// Members

/**
 * Список игнорируемых каналов.
 * @field
 * @name ignores
 * @type String[] 
 * 
 * @memberof Logger
 * 
 * @static 
 *
 */

/**
 * Список отображаемых в консоли уровней лога.
 * @field
 * @name logLevels
 * @type String[] 
 * 
 * @memberof Logger
 * 
 * @static 
 *
 */

/**
 * Запись в лог с уровнем <b>debug</b>.
 * @field
 * @name debug
 *
 * @memberof Logger
 *
 */

/**
 * Запись в лог с уровнем <b>log</b>.
 * @field
 * @name log
 *
 * @memberof Logger
 *
 */

/**
 * Запись в лог с уровнем <b>info</b>.
 * @field
 * @name info
 *
 * @memberof Logger
 *
 */

/**
 * Запись в лог с уровнем <b>warn</b>.
 * @field
 * @name warn
 *
 * @memberof Logger
 *
 */

/**
 * Запись в лог с уровнем <b>error</b>.
 * @field
 * @name error
 *
 * @memberof Logger
 *
 */

/**
 * Запись в лог с уровнем <b>trace</b>.
 * @field
 * @name trace
 *
 * @memberof Logger
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * Сделать запись в лог.
 * @name log
 * 
 * @memberof Logger
 * 
 * @static
 * @param { String } level Уровень лога.
 * @param { String } channel Канал.
 * @param { Object } context Контекст вызова.
 * @param { * } [args] Дополнительные аргументы.
 * 
 */

//-----------------------------------------------------------//

/**
 * @class Обещание с возможностью отмены связанного с ним действия.
 * @name AbortablePromise
 *
 * @extends lib.Promise
 *

 * @noconstructor
 */

/*************************************************************/

// Functions

/**
 * @function
 * Отмена действия, связанного с обещанием. Абстрактный метод.
 * @name abort
 * 
 * @memberof AbortablePromise
 *
 * @param { String | <xref scope="external" href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Error">Error</xref> } reason Причина отмены действия.
 * 
 */

/*************************************************************/

// Typedefs
//-----------------------------------------------------------//

/**
 * Описание временных данных плеера.
 * @typedef { Object } Audio.AudioTimes
 *
 * @property { Number } duration Длительность аудиофайла.
 * @property { Number } loaded Длительность загруженной части.
 * @property { Number } position Позиция воспроизведения.
 * @property { Number } played Длительность воспроизведения.
 */

//-----------------------------------------------------------//

/**
 * Аудио-препроцессор.
 * @typedef { Object } Audio.AudioPreprocessor
 *
 * @property { AudioNode } input Нода, в которую перенаправляется вывод аудио.
 * @property { AudioNode } output Нода, из которой вывод подается на усилитель.
 */

//-----------------------------------------------------------//

/**
 * Описание настроек эквалайзера.
 * @typedef { Object } Audio.fx.Equalizer.EqualizerPreset
 *
 * @property { String } [id] Идентификатор настроек.
 * @property { Number } preamp Предусилитель.
 * @property { Number[] } bands Значения для полос эквалайзера.
 */

/*************************************************************/

// Namespaces
//-----------------------------------------------------------//

/**
 * Общие настройки.
 *
 * <ul>
 * <li><codeph>retry</codeph> { Number } Количество попыток реинициализации</li>
 * </ul>
 * @name Audio.config.audio
 * @type Object
 */

//-----------------------------------------------------------//

/**
 * Настройки подключения Flash-плеера.
 *
 * <ul>
 * <li><codeph>path</codeph> { String } Путь к .swf файлу флеш-плеера</li>
 * <li><codeph>name</codeph> { String } Имя .swf файла флеш-плеера</li>
 * <li><codeph>version</codeph> { String } Минимальная версия флеш-плеера</li>
 * <li><codeph>playerID</codeph> { String } ID, который будет выставлен для элемента с Flash-плеером</li>
 * <li><codeph>callback</codeph> { String } Имя функции-обработчика событий Flash-плеера</li>
 * <li><codeph>initTimeout</codeph> { Number } Таймаут инициализации</li>
 * <li><codeph>loadTimeout</codeph> { Number } Таймаут загрузки</li>
 * <li><codeph>clickTimeout</codeph> { Number } Таймаут инициализации после клика</li>
 * <li><codeph>heartBeatInterval</codeph> { Number } Интервал проверки доступности Flash-плеера</li>
 * </ul>
 * @name Audio.config.flash
 * @type Object
 */

//-----------------------------------------------------------//

/**
 * Описание настроек HTML5 плеера.
 *
 * <ul>
 * <li><codeph>blacklist</codeph> { String[] } Список идентификаторов для которых лучше не использовать html5 плеер. Используется при авто-определении типа плеера. Идентификаторы сравниваются со строкой построенной по шаблону <codeph>@&lt;platform.version&gt; &lt;platform.os&gt;:&lt;browser.name&gt;/&lt;browser.version&gt;</codeph></li>
 * </ul>
 * @name Audio.config.html5
 * @type Object
 */

//-----------------------------------------------------------//

/**
 * Информация о браузере
 *
 * <ul>

 * <li><codeph>name</codeph> { string } название браузера</li>

 * <li><codeph>version</codeph> { string } версия</li>

 * <li><codeph>documentMode</codeph> { number } версия документа (для IE)</li>
 * </ul>
 * @name info.browser
 * @type Object
 */

//-----------------------------------------------------------//

/**
 * Информация о платформе
 *
 * <ul>

 * <li><codeph>os</codeph> { string } тип операционной системы</li>

 * <li><codeph>type</codeph> { string } тип платформы</li>

 * <li><codeph>tablet</codeph> { boolean } планшет</li>

 * <li><codeph>mobile</codeph> { boolean } мобильный</li>
 * </ul>
 * @name info.platform
 * @type Object
 */

//-----------------------------------------------------------//

/**
 * @namespace Настройки библиотеки.
 * @name Audio.config
 *
 */

//-----------------------------------------------------------//

/**
 * @namespace Методы конвертации значений громкости.
 * @name Audio.fx.volumeLib
 *
 */

/*************************************************************/

// Members

/**
 * Минимальное значение громкости, при котором происходит отключение звука. Ограничение в 0.01 подобрано эмпирически.
 * @field
 * @name EPSILON
 * @type number 
 * 
 * @memberof Audio.fx.volumeLib
 * 
 * @static 
 *
 */

/*************************************************************/

// Functions

/**
 * @function
 * 
 * @name toExponent
 * 
 * @memberof Audio.fx.volumeLib
 *
 * @param { Number } value Значение на шкале.
 * @returns { Number } Вычисление значение относительной громкости по значению на логарифмической шкале.
 */

/**
 * @function
 * 
 * @name fromExponent
 * 
 * @memberof Audio.fx.volumeLib
 *
 * @param { Number } volume Громкость.
 * @returns { Number } Вычисление положения на логарифмической шкале по значению относительной громкости громкости
 */

/**
 * @function
 * 
 * @name toDBFS
 * 
 * @memberof Audio.fx.volumeLib
 *
 * @param { Number } volume Относительная громкость.
 * @returns { Number } Вычисление значения dBFS из относительного значения громкости.
 */

/**
 * @function
 * 
 * @name fromDBFS
 * 
 * @memberof Audio.fx.volumeLib
 *
 * @param { Number } dbfs Громкость в dBFS.
 * @returns { Number } Вычисление значения относительной громкости из значения dBFS.
 */

//-----------------------------------------------------------//

/**
 * @namespace Информация об окружении
 * @name info
 *
 */

/*************************************************************/

// Members

/**
 * Настройка громкости
 * @field
 * @name onlyDeviceVolume
 * @type boolean 
 * 
 * @memberof info
 * 
 * @static 
 *
 */

