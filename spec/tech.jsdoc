/*************************************************************/

// Classes

//-----------------------------------------------------------//

/**
 * @class Аудиоплеер для браузера.
 * @name ya.music.Audio
 *
 * @extends Events
 *
 * @fires ya.music.Audio.EVENT_PLAY
 * @fires ya.music.Audio.EVENT_ENDED
 * @fires ya.music.Audio.EVENT_VOLUME
 * @fires ya.music.Audio.EVENT_CRASHED
 * @fires ya.music.Audio.EVENT_STATE
 * @fires ya.music.Audio.EVENT_SWAP
 * @fires ya.music.Audio.EVENT_STOP
 * @fires ya.music.Audio.EVENT_PAUSE
 * @fires ya.music.Audio.EVENT_PROGRESS
 * @fires ya.music.Audio.EVENT_LOADING
 * @fires ya.music.Audio.EVENT_LOADED
 * @fires ya.music.Audio.EVENT_ERROR
 * @fires ya.music.Audio.PRELOADER_EVENT+EVENT_STOP
 * @fires ya.music.Audio.PRELOADER_EVENT+EVENT_PROGRESS
 * @fires ya.music.Audio.PRELOADER_EVENT+EVENT_LOADING
 * @fires ya.music.Audio.PRELOADER_EVENT+EVENT_LOADED
 * @fires ya.music.Audio.PRELOADER_EVENT+EVENT_ERROR
 *
 * @constructor
 * 
 * @param { String } [preferredType] Предпочитаемый тип плеера. Может принимать значения: &quot;html5&quot;, &quot;flash&quot; или любое ложное значение (false, null, undefined, 0, &quot;&quot;). Если выбранный тип плеера окажется недоступен, будет запущен оставшийся тип. Если указано ложное значение либо параметр не передан, то API автоматически выберет поддерживаемый тип плеера. Если браузер поддерживает обе технологии, то по умолчанию YandexAudio создает аудиоплеер на основе HTML5.
 * @param { HTMLElement } [overlay] HTML-контейнер для отображения Flash-апплета.
 * 
 */

/*************************************************************/

// Members

/**
* Список доступных плееров
* @field
* @name info
* @type { Object }
* 
* @memberof ya.music.Audio
* 
* @static 
*/

/**
* Контекст для Web ya.music.Audio API.
* @field
* @name audioContext
* @type { AudioContext }
* 
* @memberof ya.music.Audio
* 
* @static 
*/

/*************************************************************/

// Functions

/**
 * Получить длительность текущего аудио-файла (в секундах).
 * @function
 * @name getDuration
 * 
 * @memberof ya.music.Audio
 *
 * @param { Boolean | int } preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.
 * @returns { Number } 
 */

/**
 * Получить обещание, разрешающееся после завершения инициализации.
 * @function
 * @name initPromise
 * 
 * @memberof ya.music.Audio
 *
 * @returns { Promise } 
 */

/**
 * Получить текущий тип реализации плеера.
 * @function
 * @name getType
 * 
 * @memberof ya.music.Audio
 *
 * @returns { String | null } 
 */

/**
 * Получить ссылку на текущий трек.
 * @function
 * @name getSrc
 * 
 * @memberof ya.music.Audio
 *
 * @param { int } [offset] Брать аудио-файл из активного плеера или из прелоадера. 0 - активный плеер, 1 - прелоадер.
 * @returns { String | null } 
 */

/**
 * Запуск воспроизведения.
 * @function
 * @name play
 * 
 * @memberof ya.music.Audio
 *
 * @param { String } src Ссылка на трек.
 * @param { Number } [duration] Длительность аудио-файла. Актуально для Flash-реализации, в ней пока аудио-файл грузится длительность определяется с погрешностью.
 * @returns { AbortablePromise } 
 */

/**
 * Перезапуск воспроизведения.
 * @function
 * @name restart
 * 
 * @memberof ya.music.Audio
 *
 * @returns { AbortablePromise } обещание, которое разрешится, когда трек будет перезапущен.
 */

/**
 * Остановка воспроизведения.
 * @function
 * @name stop
 * 
 * @memberof ya.music.Audio
 *
 * @param { int } [offset] Активный плеер или прелоадер. 0 - активный плеер. 1 - прелоадер.
 * @returns { AbortablePromise } обещание, которое разрешится, когда воспроизведение будет остановлено.
 */

/**
 * Поставить плеер на паузу.
 * @function
 * @name pause
 * 
 * @memberof ya.music.Audio
 *
 * @returns { AbortablePromise } обещание, которое  разрешится, когда плеер будет поставлен на паузу.
 */

/**
 * Снятие плеера с паузы.
 * @function
 * @name resume
 * 
 * @memberof ya.music.Audio
 *
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется воспроизведение.
 */

/**
 * Запуск воспроизведения предзагруженного аудиофайла.
 * @function
 * @name playPreloaded
 * 
 * @memberof ya.music.Audio
 *
 * @param { String } [src] Ссылка на аудиофайл (для проверки, что в прелоадере нужный трек).
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется воспроизведение предзагруженного аудиофайла.
 */

/**
 * Предзагрузка аудиофайла.
 * @function
 * @name preload
 * 
 * @memberof ya.music.Audio
 *
 * @param { String } src Ссылка на трек.
 * @param { Number } [duration] Длительность аудиофайла. Актуально для Flash-реализации, в ней пока аудиофайл грузится длительность определяется с погрешностью.
 * @returns { AbortablePromise } обещание, которое разрешится, когда начнется предзагрузка аудиофайла.
 */

/**
 * Проверка, что аудиофайл предзагружен.
 * @function
 * @name isPreloaded
 * 
 * @memberof ya.music.Audio
 *
 * @param { String } src Ссылка на трек.
 * @returns { Boolean } true, если аудиофайл предзагружен, false - иначе.
 */

/**
 * Проверка, что аудиофайл предзагружается.
 * @function
 * @name isPreloading
 * 
 * @memberof ya.music.Audio
 *
 * @param { String } src Ссылка на трек.
 * @returns { Boolean } true, если аудиофайл начал предзагружаться, false - иначе.
 */

/**
 * Получение позиции воспроизведения (в секундах).
 * @function
 * @name getPosition
 * 
 * @memberof ya.music.Audio
 *
 * @returns { Number } 
 */

/**
 * Установка позиции воспроизведения (в секундах).
 * @function
 * @name setPosition
 * 
 * @memberof ya.music.Audio
 *
 * @param { Number } position Новая позиция воспроизведения
 * @returns { Number } итоговая позиция воспроизведения.
 */

/**
 * Получить статус плеера.
 * @function
 * @name getState
 * 
 * @memberof ya.music.Audio
 *
 * @returns { String } 
 */

/**
 * Получить длительность загруженной части (в секундах).
 * @function
 * @name getLoaded
 * 
 * @memberof ya.music.Audio
 *
 * @param { Boolean | int } preloader Активный плеер или предзагрузчик. 0 - активный плеер, 1 - предзагрузчик.
 * @returns { Number } 
 */

/**
 * Получить длительность воспроизведения (в секундах).
 * @function
 * @name getPlayed
 * 
 * @memberof ya.music.Audio
 *
 * @returns { Number } 
 */

/**
 * Получить текущее значение громкости плеера.
 * @function
 * @name getVolume
 * 
 * @memberof ya.music.Audio
 *
 * @returns { Number } 
 */

/**
 * Установка громкости плеера.
 * @function
 * @name setVolume
 * 
 * @memberof ya.music.Audio
 *
 * @param { Number } volume Новое значение громкости.
 * @returns { Number } итоговое значение громкости.
 */

/**
 * Проверка, что громкость управляется устройством, а не программно.
 * @function
 * @name isDeviceVolume
 * 
 * @memberof ya.music.Audio
 *
 * @returns { Boolean } true, если громкость управляется устройством, false - иначе.
 */

/**
 * Включить режим CORS для получения аудио-треков
 * @function
 * @name toggleCrossDomain
 * 
 * @memberof ya.music.Audio
 *
 * @param { Boolean } state Запрашиваемый статус.
 * @returns { boolean } статус успеха.
 */

/**
 * Переключение режима использования Web ya.music.Audio API. Доступен только при html5-реализации плеера.
Внимание!!! После включения режима Web ya.music.Audio API он не отключается полностью, т.к. для этого требуется
реинициализация плеера, которой требуется клик пользователя. При отключении из графа обработки исключаются
все ноды кроме нод-источников и ноды вывода, управление громкостью переключается на элементы audio, без
использования GainNode.
 * @function
 * @name toggleWebAudioAPI
 * 
 * @memberof ya.music.Audio
 *
 * @param { Boolean } state Запрашиваемый статус.
 * @returns { Boolean } итоговый статус
 */

/**
 * Подключение аудио препроцессора. Вход препроцессора подключается к аудиоэлементу, у которого выставлена
100% громкость. Выход препроцессора подключается к GainNode, которая регулирует итоговую громкость.
 * @function
 * @name setAudioPreprocessor
 * 
 * @memberof ya.music.Audio
 *
 * @param { AudioPreprocessor } preprocessor Препроцессор.
 * @returns { boolean } статус успеха.
 */

/**
 * Получить уникальный идентификатор воспроизведения. Создаётся каждый раз при запуске нового трека или перезапуске текущего.
 * @function
 * @name getPlayId
 * 
 * @memberof ya.music.Audio
 *
 * @returns { String } 
 */

/*************************************************************/

// Events

/**
 * Событие обновления позиции воспроизведения или загруженной части.
 * 
 * @event
 * @name ya.music.Audio.EVENT_PROGRESS
 * @param { AudioTimes } times Информация о временных данных аудиофайла.
 */

/**
 * Событие начала воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.EVENT_PLAY
 */

/**
 * Событие изменения громкости.
 * 
 * @event
 * @name ya.music.Audio.EVENT_VOLUME
 * @param { Number } volume Новое значение громкости.
 */

/**
 * Событие возникновения ошибки при инициализации плеера.
 * 
 * @event
 * @name ya.music.Audio.EVENT_CRASHED
 */

/**
 * Событие смены статуса плеера.
 * 
 * @event
 * @name ya.music.Audio.EVENT_STATE
 * @param { String } state Новый статус плеера.
 */

/**
 * Событие переключения активного плеера и прелоадера.
 * 
 * @event
 * @name ya.music.Audio.EVENT_SWAP
 */

/**
 * Событие остановки воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.EVENT_STOP
 */

/**
 * Событие паузы воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.EVENT_PAUSE
 */

/**
 * Событие завершения воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.EVENT_ENDED
 */

/**
 * Событие начала загрузки аудиофайла.
 * 
 * @event
 * @name ya.music.Audio.EVENT_LOADING
 */

/**
 * Событие завершения загрузки аудиофайла.
 * 
 * @event
 * @name ya.music.Audio.EVENT_LOADED
 */

/**
 * Событие ошибки воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.EVENT_ERROR
 */

/**
 * Событие остановки воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.PRELOADER_EVENT+EVENT_STOP
 */

/**
 * Событие обновления позиции загруженной части.
 * 
 * @event
 * @name ya.music.Audio.PRELOADER_EVENT+EVENT_PROGRESS
 * @param { AudioTimes } times Информация о временных данных аудиофайла.
 */

/**
 * Событие начала загрузки аудиофайла.
 * 
 * @event
 * @name ya.music.Audio.PRELOADER_EVENT+EVENT_LOADING
 */

/**
 * Событие завершения загрузки аудиофайла.
 * 
 * @event
 * @name ya.music.Audio.PRELOADER_EVENT+EVENT_LOADED
 */

/**
 * Событие ошибки воспроизведения.
 * 
 * @event
 * @name ya.music.Audio.PRELOADER_EVENT+EVENT_ERROR
 */
//-----------------------------------------------------------//

/**
 * @class Класс ошибки аудиопллеера.
 * @name ya.music.Audio.AudioError
 *
 * @extends Error
 *
 * @constructor
 * 
 * @param { String } message Текст ошибки.
 * 
 */

/*************************************************************/

// Members

/**
* Не найдена реализация плеера или возникла ошибка при инициализации всех доступных реализаций.
* @field
* @name NO_IMPLEMENTATION
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Аудиофайл не был предзагружен или во время загрузки произошла ошибка.
* @field
* @name NOT_PRELOADED
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Действие недоступно из текущего состояния.
* @field
* @name BAD_STATE
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Flash-плеер был заблокирован.
* @field
* @name FLASH_BLOCKER
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Возникла ошибка при инициализации Flash-плеера по неизвестным причинам.
* @field
* @name FLASH_UNKNOWN_CRASH
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Возникла ошибка при инициализации Flash-плеера из-за таймаута.
* @field
* @name FLASH_INIT_TIMEOUT
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Внутренняя ошибка Flash-плеера.
* @field
* @name FLASH_INTERNAL_ERROR
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Попытка вызвать недоступный экземляр Flash-плеера.
* @field
* @name FLASH_EMMITER_NOT_FOUND
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

/**
* Flash-плеер перестал отвечать на запросы.
* @field
* @name FLASH_NOT_RESPONDING
* @type { String }
* @const
* @memberof ya.music.Audio.AudioError
* 
* @static 
*/

//-----------------------------------------------------------//

/**
 * @class Класс ошибки воспроизведения.
 * @name ya.music.Audio.PlaybackError
 *
 * @extends Error
 *
 * @constructor
 * 
 * @param  String message Текст ошибки.
 * @param  String src Ссылка на трек.
 * 
 */

/*************************************************************/

// Members

/**
* Отмена соединенния.
* @field
* @name CONNECTION_ABORTED
* @type { String }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

/**
* Сетевая ошибка.
* @field
* @name NETWORK_ERROR
* @type { String }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

/**
* Ошибка декодирования аудио.
* @field
* @name DECODE_ERROR
* @type { String }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

/**
* Недоступный источник.
* @field
* @name BAD_DATA
* @type { String }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

/**
* Не запускается воспроизведение.
* @field
* @name DONT_START
* @type { String }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

/**
* Таблица соответствия кодов ошибок HTML5 плеера.
* @field
* @name html5
* @type { Object }
* @const
* @memberof ya.music.Audio.PlaybackError
* 
* @static 
*/

//-----------------------------------------------------------//

/**
 * @class Эквалайзер.
 * @name ya.music.Audio.fx.Equalizer
 *
 * @extends Events
 *
 * @fires ya.music.Audio.fx.Equalizer.EVENT_CHANGE
 *
 * @constructor
 * 
 * @param { AudioContext } audioContext Контекст Web ya.music.Audio API.
 * @param { Array.&lt;Number&gt; } bands Список частот для полос эквалайзера.
 * 
 */

/*************************************************************/

// Members

/**
* Набор частот эквалайзера, применяющийся по умолчанию.
* @field
* @name DEFAULT_BANDS
* @type { Array.&lt;Number&gt; }
* @const
* @memberof ya.music.Audio.fx.Equalizer
* 
* @static 
*/

/**
* Набор распространенных пресетов эквалайзера для набора частот по умолчанию.
* @field
* @name DEFAULT_PRESETS
* @type { Object.&lt;String, EqualizerPreset&gt; }
* @const
* @memberof ya.music.Audio.fx.Equalizer
* 
* @static 
*/

/**
* 
* @field
* @name EVENT_CHANGE
* @type { String }
* @const
* @memberof ya.music.Audio.fx.Equalizer
* 
* 
*/

/*************************************************************/

// Functions

/**
 * Загрузить настройки.
 * @function
 * @name loadPreset
 * 
 * @memberof ya.music.Audio.fx.Equalizer
 *
 * @param { EqualizerPreset } preset Настройки.
 * 
 */

/**
 * Сохранить текущие настройки.
 * @function
 * @name savePreset
 * 
 * @memberof ya.music.Audio.fx.Equalizer
 *
 * @returns { EqualizerPreset } 
 */

/**
 * Вычисляет оптимальное значение предусиления. Функция является экспериментальной.
 * @function
 * @name guessPreamp
 * 
 * @memberof ya.music.Audio.fx.Equalizer
 *
 * @returns { number } значение предусиления.
 */

/*************************************************************/

// Events

/**
 * Событие изменения полосы пропускания
 * 
 * @event
 * @name ya.music.Audio.fx.Equalizer.EVENT_CHANGE
 * @param { Number } freq Частота полосы пропускания.
 * @param { Number } value Значение усиления.
 */
//-----------------------------------------------------------//

/**
 * @class Класс ошибок загрузчика.
Расширяет Error.
 * @name ya.music.Audio.LoaderError
 *
 * @constructor
 * 
 * @param { String } message Текст ошибки.
 * 
 */

/*************************************************************/

// Members

/**
* Таймаут загрузки.
* @field
* @name TIMEOUT
* @type { String }
* @const
* @memberof ya.music.Audio.LoaderError
* 
* @static 
*/

/**
* Ошибка запроса на загрузку.
* @field
* @name FAILED
* @type { String }
* @const
* @memberof ya.music.Audio.LoaderError
* 
* @static 
*/

//-----------------------------------------------------------//

/**
 * @class Настраиваемый логгер для аудиоплеера.
 * @name ya.music.Audio.Logger
 *
 * @constructor
 * 
 * @param { String } channel Имя канала, за который будет отвечать экземляр логгера.
 * 
 */

/*************************************************************/

// Members

/**
* Список игнорируемых каналов.
* @field
* @name ignores
* @type { Array.&lt;String&gt; }
* 
* @memberof ya.music.Audio.Logger
* 
* @static 
*/

/**
* Список отображаемых в консоли уровней лога.
* @field
* @name logLevels
* @type { Array.&lt;String&gt; }
* 
* @memberof ya.music.Audio.Logger
* 
* @static 
*/

/**
* Запись в лог с уровнем <b>debug</b>.
* @field
* @name debug
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/**
* Запись в лог с уровнем <b>log</b>.
* @field
* @name log
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/**
* Запись в лог с уровнем <b>info</b>.
* @field
* @name info
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/**
* Запись в лог с уровнем <b>warn</b>.
* @field
* @name warn
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/**
* Запись в лог с уровнем <b>error</b>.
* @field
* @name error
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/**
* Запись в лог с уровнем <b>trace</b>.
* @field
* @name trace
* 
* 
* @memberof ya.music.Audio.Logger
* 
* 
*/

/*************************************************************/

// Functions

/**
 * Сделать запись в лог.
 * @function
 * @name log
 * 
 * @memberof ya.music.Audio.Logger
 * 
 * @static
 * @param { String } level Уровень лога.
 * @param { String } channel Канал.
 * @param { Object } context Контекст вызова.
 * @param { * } [args] Дополнительные аргументы.
 * 
 */

//-----------------------------------------------------------//

/**
 * @class Диспетчер событий.
 * @name Events
 *

 * @noconstructor
 */

/*************************************************************/

// Functions

/**
 * Расширить произвольный класс свойствами диспетчера событий.
 * @function
 * @name mixin
 * 
 * @memberof Events
 * 
 * @static
 * @param { function } classConstructor Конструктор класса.
 * @returns { function } тот же конструктор класса, расширенный свойствами диспетчера событий.
 */

/**
 * Расширить произвольный объект свойствами диспетчера событий.
 * @function
 * @name eventize
 * 
 * @memberof Events
 * 
 * @static
 * @param { Object } object Объект.
 * @returns { Object } тот же объект, расширенный свойствами диспетчера событий.
 */

/**
 * Подписаться на событие (цепочный метод).
 * @function
 * @name on
 * 
 * @memberof Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { Events } ссылку на контекст.
 */

/**
 * Отписаться от события (цепочный метод).
 * @function
 * @name off
 * 
 * @memberof Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { Events } ссылку на контекст.
 */

/**
 * Подписаться на событие и отписаться сразу после его первого возникновения (цепочный метод).
 * @function
 * @name once
 * 
 * @memberof Events
 *
 * @param { String } event Имя события.
 * @param { function } callback Обработчик события.
 * @returns { Events } ссылку на контекст.
 */

/**
 * Отписаться от всех слушателей событий (цепочный метод).
 * @function
 * @name clearListeners
 * 
 * @memberof Events
 *
 * @returns { Events } ссылку на контекст.
 */

/**
 * Остановить запуск событий (цепочный метод).
 * @function
 * @name muteEvents
 * 
 * @memberof Events
 *
 * @returns { Events } ссылку на контекст.
 */

/**
 * Возобновить запуск событий (цепочный метод).
 * @function
 * @name unmuteEvents
 * 
 * @memberof Events
 *
 * @returns { Events } ссылку на контекст.
 */

//-----------------------------------------------------------//

/**
 * @class Обещание с возможностью отмены связанного с ним действия.
 * @name AbortablePromise
 *
 * @extends Promise
 *

 * @noconstructor
 */

/*************************************************************/

// Functions

/**
 * Отмена действия, связанного с обещанием. Абстрактный метод.
 * @function
 * @name abort
 * 
 * @memberof AbortablePromise
 *
 * @param { String | Error } reason Причина отмены действия.
 * 
 */

//-----------------------------------------------------------//

/**
 * @class 
 * @name Promise
 *

 * @noconstructor
 */

/*************************************************************/

// Functions

/**
 * Назначить обработчики разрешения и отклонения обещания.
 * @function
 * @name then
 * 
 * @memberof Promise
 *
 * @param { function } callback Обработчик успеха.
 * @param { null | function } [errback] Обработчик ошибки.
 * @returns { Promise } новое обещание из результатов обработчика.
 */

/**
 * Назначить обработчик отклонения обещания.
 * @function
 * @name catch
 * 
 * @memberof Promise
 *
 * @param { function } errback Обработчик ошибки.
 * @returns { Promise } новое обещание из результатов обработчика.
 */

/*************************************************************/

// Typedefs
//-----------------------------------------------------------//

/**
 * Описание временных данных плеера.
 * @typedef { Object } AudioTimes
 * @memberof ya.music.Audio
 * @inner
 * 
 * @property { Number } duration Длительность аудиофайла.
 * @property { Number } loaded Длительность загруженной части.
 * @property { Number } position Позиция воспроизведения.
 * @property { Number } played Длительность воспроизведения.
 */

//-----------------------------------------------------------//

/**
 * Аудио-препроцессор.
 * @typedef { Object } AudioPreprocessor
 * @memberof ya.music.Audio
 * @inner
 * 
 * @property { AudioNode } input Нода, в которую перенаправляется вывод аудио.
 * @property { AudioNode } output Нода, из которой вывод подается на усилитель.
 */

//-----------------------------------------------------------//

/**
 * Описание настроек эквалайзера.
 * @typedef { Object } EqualizerPreset
 * @memberof ya.music.Audio.fx.Equalizer
 * @inner
 * 
 * @property { String } [id] Идентификатор настроек.
 * @property { Number } preamp Предусилитель.
 * @property { Array.&lt;Number&gt; } bands Значения для полос эквалайзера.
 */

/*************************************************************/

// Namespaces
//-----------------------------------------------------------//

/**
* Общие настройки.
* @name ya.music.Audio.config.audio
* 
* 
* @static
* @namespace
*/

/*************************************************************/

// Members

/**
* Количество попыток реинициализации
* @field
* @name retry
* @type { Number }
* 
* @memberof ya.music.Audio.config.audio
* 
* @static 
*/

//-----------------------------------------------------------//

/**
* Настройки подключения Flash-плеера.
* @name ya.music.Audio.config.flash
* 
* 
* @static
* @namespace
*/

/*************************************************************/

// Members

/**
* Путь к .swf файлу флеш-плеера
* @field
* @name path
* @type { String }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Имя .swf файла флеш-плеера
* @field
* @name name
* @type { String }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Минимальная версия флеш-плеера
* @field
* @name version
* @type { String }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* ID, который будет выставлен для элемента с Flash-плеером
* @field
* @name playerID
* @type { String }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Имя функции-обработчика событий Flash-плеера
* @field
* @name callback
* @type { String }
* @const
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Таймаут инициализации
* @field
* @name initTimeout
* @type { Number }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Таймаут загрузки
* @field
* @name loadTimeout
* @type { Number }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Таймаут инициализации после клика
* @field
* @name clickTimeout
* @type { Number }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

/**
* Интервал проверки доступности Flash-плеера
* @field
* @name heartBeatInterval
* @type { Number }
* 
* @memberof ya.music.Audio.config.flash
* 
* @static 
*/

//-----------------------------------------------------------//

/**
* Описание настроек HTML5 плеера.
* @name ya.music.Audio.config.html5
* 
* 
* @static
* @namespace
*/

/*************************************************************/

// Members

/**
* Список идентификаторов для которых лучше не использовать html5 плеер. Используется при авто-определении типа плеера. Идентификаторы сравниваются со строкой построенной по шаблону <codeph>@&amp;lt;platform.version&amp;gt; &amp;lt;platform.os&amp;gt;:&amp;lt;browser.name&amp;gt;/&amp;lt;browser.version&amp;gt;</codeph>
* @field
* @name blacklist
* @type { Array.&lt;String&gt; }
* 
* @memberof ya.music.Audio.config.html5
* 
* @static 
*/

//-----------------------------------------------------------//

/**
* Настройки библиотеки.
* @name ya.music.Audio.config
* 
* 
* 
* @namespace
*/

//-----------------------------------------------------------//

/**
* Методы конвертации значений громкости.
* @name ya.music.Audio.fx.volumeLib
* 
* 
* 
* @namespace
*/

/*************************************************************/

// Members

/**
* Минимальное значение громкости, при котором происходит отключение звука. Ограничение в 0.01 подобрано эмпирически.
* @field
* @name EPSILON
* @type { number }
* 
* @memberof ya.music.Audio.fx.volumeLib
* 
* @static 
*/

/*************************************************************/

// Functions

/**
 * Вычисление значение относительной громкости по значению на логарифмической шкале.
 * @function
 * @name toExponent
 * 
 * @memberof ya.music.Audio.fx.volumeLib
 * 
 * @static
 * @param { Number } value Значение на шкале.
 * @returns { Number } 
 */

/**
 * Вычисление положения на логарифмической шкале по значению относительной громкости громкости
 * @function
 * @name fromExponent
 * 
 * @memberof ya.music.Audio.fx.volumeLib
 * 
 * @static
 * @param { Number } volume Громкость.
 * @returns { Number } 
 */

/**
 * Вычисление значения dBFS из относительного значения громкости.
 * @function
 * @name toDBFS
 * 
 * @memberof ya.music.Audio.fx.volumeLib
 * 
 * @static
 * @param { Number } volume Относительная громкость.
 * @returns { Number } 
 */

/**
 * Вычисление значения относительной громкости из значения dBFS.
 * @function
 * @name fromDBFS
 * 
 * @memberof ya.music.Audio.fx.volumeLib
 * 
 * @static
 * @param { Number } dbfs Громкость в dBFS.
 * @returns { Number } 
 */

